#! /usr/bin/env ruby
# typed: true
# frozen_string_literal: true

require "bundler/setup"

require "thor"
require_relative "../lib/rbi-central"
require_relative "../lib/rbi-central/cli/helper"

module RBICentral
  module CLI
    class Check < Thor
      include Helper

      class_option :color, type: :boolean, default: true, desc: "Use colors"
      class_option :bundle_config, type: :hash, default: {}, desc: "Config to pass to bundle"

      default_task :auto

      desc "auto", "Run checks depending on changes files"
      option :all, type: :boolean, default: false, desc: "Check all checks"
      option :index, type: :boolean, default: true, desc: "Check index"
      option :rubocop, type: :boolean, default: true, desc: "Check rubocop"
      option :rubygems, type: :boolean, default: true, desc: "Check rubygems"
      option :runtime, type: :boolean, default: true, desc: "Check runtime"
      option :static, type: :boolean, default: true, desc: "Check static"
      option :gem, type: :boolean, default: true, desc: "Check repo gem"
      option :ref, type: :string, default: "HEAD", desc: "Check against a Git ref"
      option :source, type: :string, default: "https://rubygems.org", desc: "Source to install gems from"
      def auto(*gem_names)
        section("Checking changed files...")

        checks = select_checks(gem_names, options)
        if checks.changed_files.any?
          $stderr.puts(<<~LOG)
            Changed files:

            #{checks.changed_files.map { |file| " * #{file}" }.join("\n")}

          LOG
        end

        unless checks.any?
          log("No change detected. Run with `--all` to run all checks.")
          return
        end

        log("The following checks will run:\n")
        log("  `gem`      runs the test units of the embedded gem") if checks.gem_tests
        log("  `index`    checks the index validity") if checks.index
        log("  `rubocop`  checks the RBI files against RuboCop") if checks.rubocop
        log("  `rubygems` checks the RBI files against Rubygems") if checks.rubygems
        log("  `runtime`  checks the RBI files against runtime execution") if checks.runtime
        log("  `static`   checks the RBI files against Tapioca and Sorbet") if checks.static

        $stderr.puts("\n")

        gem_names = checks.changed_annotations
        success = T.let(true, T::Boolean)
        if checks.gem_tests
          success &= run_check! do
            gem
          end
        end
        if checks.index
          success &= run_check! do
            index
          end
        end
        if checks.rubocop
          success &= run_check! do
            T.unsafe(self).rubocop(*gem_names)
          end
        end
        if checks.rubygems
          success &= run_check! do
            T.unsafe(self).rubygems(*gem_names)
          end
        end
        if checks.runtime
          success &= run_check! do
            T.unsafe(self).runtime(*gem_names)
          end
        end
        if checks.static
          success &= run_check! do
            T.unsafe(self).static(*gem_names)
          end
        end
        if success
          success("All checks passed without error, good job!")
        else
          raise Thor::Error, red("Some checks failed. See above for details.")
        end
      end

      desc "gem", "Runs the test units of the embedded gem"
      def gem
        section("Checking gem...")
        Bundler.with_unbundled_env do
          log("Installing gem dependencies...")
          $stderr.puts
          success = system("cd gem && bundle install --quiet")
          if success
            log("Running Sorbet on gem...")
            $stderr.puts
            success &= system("cd gem && bin/typecheck")
            $stderr.puts
            log("Running Rubocop on gem...")
            $stderr.puts
            success &= system("cd gem && bin/style")
            $stderr.puts
            log("Running gem tests...")
            $stderr.puts
            success &= system("cd gem && bin/test")
            $stderr.puts
          end
          unless success
            raise Thor::Error, red("Some checks failed. See above for details.")
          end
        end
      end

      desc "index", "Check repo index validity"
      def index
        section("Checking index...")
        check_errors! do
          repo.check_index
        end
      end

      desc "rubocop", "Check RBI annotations with Rubocop"
      def rubocop(*gem_names)
        section("Linting RBI files...")
        check_gems!(names: gem_names) do |repo, gem|
          log("Linting `#{gem.name}`...")
          repo.check_rubocop_for(gem, color: color?)
        end
      end

      desc "rubygems", "Check gems belong to rubygems"
      def rubygems(*gem_names)
        section("Checking that RBI files belong to public gems...")
        check_gems!(names: gem_names) do |repo, gem|
          log("Checking Rubygems for `#{gem.name}`...")
          repo.check_rubygems_for(gem)
        end
      end

      desc "static", "Check RBI annotations against Tapioca generated RBIs and Sorbet"
      def static(*gem_names)
        section("Checking RBI files against Tapioca and Sorbet...")
        check_gems!(names: gem_names) do |repo, gem|
          log("Checking static for `#{gem.name}`...")
          repo.check_static_for(gem, color: color?)
        end
      end

      desc "runtime", "Check RBI annotations against runtime behavior"
      def runtime(*gem_names)
        section("Checking RBI files against runtime execution...")
        check_gems!(names: gem_names) do |repo, gem|
          log("Checking runtime for `#{gem.name}`...")
          repo.check_runtime_for(gem)
        end
      end
    end

    class Main < Thor
      extend T::Sig

      desc "check", "Check repo validity"
      subcommand "check", RBICentral::CLI::Check

      sig { returns(T::Boolean) }
      def self.exit_on_failure?
        true
      end
    end
  end
end

RBICentral::CLI::Main.start(ARGV)
